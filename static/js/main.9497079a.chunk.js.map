{"version":3,"sources":["ColorPicker.js","App.js","reportWebVitals.js","index.js"],"names":["ColorPicker","_ref","colors","_useState","useState","_useState2","_slicedToArray","showColors","setShowColors","_useState3","_useState4","selectedColor","setSelectedColor","React","createElement","onClick","className","map","color","index","key","style","backgroundColor","handleColorClick","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"6LAoCeA,MAnCf,SAAoBC,GAAa,IAAVC,EAAMD,EAANC,OAAMC,EACSC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAA5CI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAAAI,EACUL,mBAAS,MAAKM,EAAAJ,YAAAG,EAAA,GAAjDE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GAWtC,OACEG,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAQC,QAXc,WACxBP,GAAc,KAUwB,gBACnCD,GACCM,IAAAC,cAAA,OAAKE,UAAU,cACZd,EAAOe,IAAI,SAACC,EAAOC,GAAK,OACvBN,IAAAC,cAAA,OACEM,IAAKD,EACLH,UAAU,aACVK,MAAO,CAAEC,gBAAiBJ,GAC1BH,QAAS,kBAfI,SAACG,GACxBN,EAAiBM,GACjBV,GAAc,GAaWe,CAAiBL,SAKvCP,GACCE,IAAAC,cAAA,SAAG,mBAAiBH,WCfba,MAXf,WAGE,OACEX,IAAAC,cAAA,OAAKE,UAAU,OACbH,IAAAC,cAAA,UAAI,gBACJD,IAAAC,cAACd,EAAW,CAACE,OALF,CAAC,UAAW,UAAW,UAAW,UAAW,eCO/CuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAA7B,GAAiD,IAA9C+B,EAAM/B,EAAN+B,OAAQC,EAAMhC,EAANgC,OAAQC,EAAMjC,EAANiC,OAAQC,EAAMlC,EAANkC,OAAQC,EAAOnC,EAAPmC,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH5B,IAAAC,cAACD,IAAM6B,WAAU,KACf7B,IAAAC,cAACU,EAAG,QAORC","file":"static/js/main.9497079a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nfunction ColorPicker({ colors }) {\n  const [showColors, setShowColors] = useState(false);\n  const [selectedColor, setSelectedColor] = useState(null);\n\n  const handleButtonClick = () => {\n    setShowColors(true);\n  };\n\n  const handleColorClick = (color) => {\n    setSelectedColor(color);\n    setShowColors(false);\n  };\n\n  return (\n    <div>\n      <button onClick={handleButtonClick}>Pick a color</button>\n      {showColors && (\n        <div className=\"color-list\">\n          {colors.map((color, index) => (\n            <div\n              key={index}\n              className=\"color-item\"\n              style={{ backgroundColor: color }}\n              onClick={() => handleColorClick(color)}\n            ></div>\n          ))}\n        </div>\n      )}\n      {selectedColor && (\n        <p>Selected Color: {selectedColor}</p>\n      )}\n    </div>\n  );\n}\n\nexport default ColorPicker;\n","import React from 'react';\nimport ColorPicker from './ColorPicker';\nimport './App.css';\n\nfunction App() {\n  const colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#00ffff'];\n\n  return (\n    <div className=\"App\">\n      <h1>Color Picker</h1>\n      <ColorPicker colors={colors} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}